<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_entg_hhs_poc.SHA1Hashing</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>SHA1Hashing</name>
        <script><![CDATA[/**
 * Computes a HMAC-SHA1 code.
 *
 * @param {string} k Secret key.
 * @param {string} d Data to be hashed.
 * @return {string} The hashed string.
 */
var SHA1Hashing = Class.create();
SHA1Hashing.prototype = {
    initialize: function() {},
    b64_hmac_sha1: function(k, d, _p, _z) {
        // heavily optimized and compressed version of http://pajhome.org.uk/crypt/md5/sha1.js
        // _p = b64pad, _z = character size; not used here but I left them available just in case
        if (!_p) {
            _p = '=';
        }
        if (!_z) {
            _z = 8;
        }
        return _x(k, d);
    },
    _f: function(t, b, c, d) {
        if (t < 20) {
            return (b & c) | ((~b) & d);
        }
        if (t < 40) {
            return b ^ c ^ d;
        }
        if (t < 60) {
            return (b & c) | (b & d) | (c & d);
        }
        return b ^ c ^ d;
    },

    _k: function(t) {
        return (t < 20) ? 1518500249 : (t < 40) ? 1859775393 : (t < 60) ? -1894007588 : -899497514;
    },

    _s: function(x, y) {
        var l = (x & 0xFFFF) + (y & 0xFFFF),
            m = (x >> 16) + (y >> 16) + (l >> 16);
        return (m << 16) | (l & 0xFFFF);
    },

    _r: function(n, c) {
        return (n << c) | (n >>> (32 - c));
    },

    _c: function(x, l) {
        x[l >> 5] |= 0x80 << (24 - l % 32);
        x[((l + 64 >> 9) << 4) + 15] = l;
        var w = [80],
            a = 1732584193,
            b = -271733879,
            c = -1732584194,
            d = 271733878,
            e = -1009589776;
        for (var i = 0; i < x.length; i += 16) {
            var o = a,
                p = b,
                q = c,
                r = d,
                s = e;
            for (var j = 0; j < 80; j++) {
                if (j < 16) {
                    w[j] = x[i + j];
                } else {
                    w[j] = _r(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
                }
                var t = _s(_s(_r(a, 5), _f(j, b, c, d)), _s(_s(e, w[j]), _k(j)));
                e = d;
                d = c;
                c = _r(b, 30);
                b = a;
                a = t;
            }
            a = _s(a, o);
            b = _s(b, p);
            c = _s(c, q);
            d = _s(d, r);
            e = _s(e, s);
        }
        return [a, b, c, d, e];
    },

    _b: function(s) {
        var b = [],
            m = (1 << _z) - 1;
        for (var i = 0; i < s.length * _z; i += _z) {
            b[i >> 5] |= (s.charCodeAt(i / 8) & m) << (32 - _z - i % 32);
        }
        return b;
    },

    _h: function(k, d) {
        var b = _b(k);
        if (b.length > 16) {
            b = _c(b, k.length * _z);
        }
        var p = [16],
            o = [16];
        for (var i = 0; i < 16; i++) {
            p[i] = b[i] ^ 0x36363636;
            o[i] = b[i] ^ 0x5C5C5C5C;
        }
        var h = _c(p.concat(_b(d)), 512 + d.length * _z);
        return _c(o.concat(h), 512 + 160);
    },

    _n: function(b) {
        var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
            s = '';
        for (var i = 0; i < b.length * 4; i += 3) {
            var r = (((b[i >> 2] >> 8 * (3 - i % 4)) & 0xFF) << 16) | (((b[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4)) & 0xFF) << 8) | ((b[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4)) & 0xFF);
            for (var j = 0; j < 4; j++) {
                if (i * 8 + j * 6 > b.length * 32) {
                    s += _p;
                } else {
                    s += t.charAt((r >> 6 * (3 - j)) & 0x3F);
                }
            }
        }
        return s;
    },

    _x: function(k, d) {
        return _n(_h(k, d));
    },
	Utf8Encode: function(string) {
        string = string.replace(/\r\n/g, "\n");
        var utftext = "";
        for (var n = 0; n < string.length; n++) {
            var c = string.charCodeAt(n);
            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            } else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }
        }
        return utftext;
    },

    type: 'SHA1Hashing'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>jade.garcia</sys_created_by>
        <sys_created_on>2018-01-29 22:04:12</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>3c2441d84f849700ec6c3cb28110c7aa</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>SHA1Hashing</sys_name>
        <sys_package display_value="HHS OIG POC" source="x_entg_hhs_poc">62f1d40a4fb38300f78e74828110c78e</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="HHS OIG POC">62f1d40a4fb38300f78e74828110c78e</sys_scope>
        <sys_update_name>sys_script_include_3c2441d84f849700ec6c3cb28110c7aa</sys_update_name>
        <sys_updated_by>jade.garcia</sys_updated_by>
        <sys_updated_on>2018-01-30 15:13:49</sys_updated_on>
    </sys_script_include>
</record_update>
